import NftCard from "@/components/NftCard";
import Head from "next/head";
import { useState } from "react";

export default function Home() {
  const [walletAddress, setWalletAddress] = useState("");
  const [collectionAddress, setCollectionAddress] = useState("");
  const [nfts, setNfts] = useState([]);
  const [isFetchCollection, setIsFetchCollection] = useState(false);

  const fetchNft = async (e) => {
    let nfts;
    console.log("Fetching Nfts");

    const apiKey = "Your Mainnet Api Key.";
    const baseURL = `https://eth-mainnet.g.alchemy.com/nft/v2/${apiKey}/getNFTs/`;

    var requestOptions = {
      method: "GET",
      redirect: "follow",
    };
    if (!collectionAddress.length) {
      const fetchURL = `${baseURL}?owner=${walletAddress}`;

      nfts = await fetch(fetchURL, requestOptions).then((data) => data.json());
    } else {
      const fetchURL = `${baseURL}?owner=${walletAddress}&contractAddresses%5B%5D=${collectionAddress}`;
      nfts = await fetch(fetchURL, requestOptions).then((data) => data.json());
    }

    if (nfts) {
      console.log(nfts.ownedNfts);
      setNfts(nfts.ownedNfts);
    }
  };

  const fetchNftForCollection = async () => {
    if (collectionAddress.length) {
      var requestOptions = {
        method: "GET",
        redirect: "follow",
      };
      const apiKey = "D4JQWCrIHfD48ZmK_U43REH2S_9089Ca";
      const baseURL = `https://eth-mainnet.g.alchemy.com/nft/v2/${apiKey}/getNFTsForCollection/`;

      const fetchURL = `${baseURL}?contractAddress=${collectionAddress}&withMetadata=true`;
      const nfts = await fetch(fetchURL, requestOptions).then((data) =>
        data.json()
      );

      if (nfts) {
        setNfts(nfts?.nfts)
        console.log("The Collection", nfts);
      }
    }
  };

  return (
    <>
      <Head>
        <title>NFT Gallery</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className=" my-8 ">
        <div className="flex flex-col justify-center items-center space-y-4 mx-auto w-[400px] ">
          <input
            type="text"
            disabled={isFetchCollection}
            value={walletAddress}
            onChange={(e) => setWalletAddress(e.target.value)}
            placeholder="Add Wallet Address"
            className="border bg-slate-100 text-gray-700 rounded-md outline-none w-full px-2 py-1 "
          />
          <input
            type="text "
            value={collectionAddress}
            onChange={(e) => setCollectionAddress(e.target.value)}
            placeholder="Add Collection Address"
            className="border bg-slate-100 text-gray-700 rounded-md outline-none w-full px-2 py-1"
          />
          <label>
            <input
              type="checkbox"
              className=""
              value={isFetchCollection}
              onChange={(e) => setIsFetchCollection(e.target.checked)}
            />
            Fetch Collection
          </label>
          <button
            className=" bg-blue-400 w-[120px] rounded-sm text-white h-[40px] flex items-center justify-center"
            onClick={() => {
              if (isFetchCollection) {
                fetchNftForCollection();
              } else {
                fetchNft();
              }
            }}
          >
            Let's Go!
          </button>
        </div>

        <div className="px-2 max-w-7xl place-content-center mx-auto  mt-16 flex items-center flex-wrap gap-10">
          {nfts.map((nft, i) => (
            <NftCard key={i} nft={nft} />
          ))}
        </div>
      </div>
    </>
  );
}
